
import java.util.Date;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

/**
 * @author Daniel Innes 101067175
 *
 */
public class Dice {

	/**
	 * A instance of the random number generator.
	 * 
	 * @see java.util.Random
	 */
	private Random random;
	/**
	 * A array of random numbers representing dice rolls.
	 */
	private int[] values;

	/**
	 * The number of random values generated by the main constructor.
	 */

	/**
	 * Main constructor generates defaultNumDice random values.
	 */
	public Dice() {
		this(2);
	}

	/**
	 * Secondary constructor generates numDice of random values.
	 * 
	 * @param numDice The number of random values.
	 */
	public Dice(int numDice) {
		if (numDice < 1)
			throw new IllegalArgumentException("Nice msg");
		random = new Random(new Date().hashCode());
		values = new int[numDice];
		for (int i = 0; i < numDice; ++i) {
			values[i] = rollDie();
		}
	}

	/**
	 * regenerate the random values.
	 * 
	 * @return the total of all random values.
	 */
	public int roll() {
		int total = 0;
		for (int i = 0; i < values.length; ++i) {
			values[i] = rollDie();
			total += values[i];
		}
		return total;
	}

	/**
	 * returns a random number.
	 * 
	 * @return The random number.
	 */
	private int rollDie() {
		return random.nextInt(6) + 1;
	}

	/**
	 * returns a deep copy of all values.
	 * 
	 * @return The deep copy of all values.
	 */
	public int[] getDieValues() {
		return values.clone();
	}

	public boolean hasDoubles() {
		if(values.length == 2) {
			if(values[0] == values[1]) {
				return true;
			} else {
				return false;
			}
		} else {
			Set<Integer> set = new HashSet<Integer>();
			for (int i = 0; i < values.length; ++i) {
				if (set.contains(values[i]))
					return true;
				set.add(values[i]);
			}
		}
		return false;
	}

	/**
	 * return a string representing all values e.g. 4 5 6
	 * 
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		String output = "";
		for (int value : values) {
			output += String.valueOf(value) + " ";
		}
		output.substring(0, output.length() - 1);
		return output;
	}
}
